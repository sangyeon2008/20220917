# 문자열
# a= 'Hello Python'
# print(a.count('o',7))#7번째 인덱스 수부터 o가 몇개있는지 확인
# print(a.count('o',7,10))#7번째 인덱스 수부터 9까지 o가 몇개있는지 확인
# print(a.find('o',6))#인데스 번호6부터 o가 인덱스 번호 몇번인지 찾아줌
# print(a.index('o',6))#인데스 번호6부터 o가 인덱스 번호 몇번인지 찾아줌
# print('0'.join(a))#문자 0이 인덱스 사이사이 마다 들어가있음
# print(a.replace('o','0',1))#최대 1개만 o에서 0으로 바뀜
# print(a.split())#공백 기준으로 문자가 리스트형으로 바뀜
# print(a.split('o'))#o 기준으로 문자가 리스트형으로 바뀜
# print(a.islower())# 각각 모든 문자열이 소문자인지 true 혹은 false로 확인
# print(a.capitalize())#문자열의 첫번째만 대문자로 바뀜
# print(a.isalpha())#문자열이 있었을 때공백이 있는지 없는지 확인 있으면 false 없으면 true
# print(a.isdigit())#숫자일때 공백이 있는지 없는지 확인 있으면 false 없으면 true
# print(a.isalnum())#숫자와 문자 상관없이 공백이 있는지 없는지 확인 있으면 false 없으면 true
# b=".....app.le...."
# print(b.rstrip('.'))#오른쪽의 .을 지워줌


#리스트
# a=[4,1,2,3]
# b=[5,6]

# #수정 2 =>'A'
# # a[2]='A'
# # print(a)
#
# #삭제3
# del a[3]
# print(a)
#
# #연산
# print(a+b)
# print(a*2)
#
# #맨 뒤에 값 추가
# a.append(8)
#
# #원하는 위치에 값 추가
# a.insert(2,8) #인덱스 번호 2번째에 8추가
# print(a)
#
# #원하는 값 삭제
# a.remove(5)
# print(a)
#
# #원하는 위치/ 맨 마지막 값을 추출
# print(a.pop(1))
#
# #정렬
# #자료형의 참과 거짓 => 자료혀의 값이 존재하면 참(true) 없으면 거짓(false)
# # 정수의 거짓=0 나머지는 모두 참
# a.sort(reverse=0)
# print(a)
#
# #확장
# a.extend(b) #추가되는 자료형의 길이만큼 확장
# print(a)




# 튜플 만드는 방법
# a = (1,)
# print(type(a))
# b = tuple([1,2,3,4]) #자료혀의 변환(형변환)
# c =1,2,3,4  #소관호의 붙이지 않아도 튜플로 인식한다. 단 원소가 여러개 있을 경우
# print(type(c))


#딕셔너리
# d={}
# #d= {"A" : 1,"B":2,"C" : 3}
# #딕셔너리에 Key - value 추가
# d["A"] = 1
# d["B"] = 2
# d["C"] = 3
# #d= {"A" : 4,"B": 5, "C" : 6}
# # 딕셔너리의 key - value 삭제
# del d['C']
# print(d)
#
# #딕셔너리 멤버 메소드
# #딕셔너리의 키값들만 모으기
# print(d.keys())
# #딕셔너리의 벨류값들만 모으기
# print(d.values())
# #딕셔너리의 (키,벨류) 모으기
# print(d.items())
#
# #update()
# b = {"C":3,"D":2}
# print(d.update(b))
# print(d)
#
# print('A'in d.keys())
# print('A'in d)
# print(4 in d.values())
#
# for i in d:
#     print(d[i])
#


#
# #집합(set)
# #1.중복된 값이 없다.
# l=[1,2,4,6,8,5,4,37,9,67,5,4,3,6,9,5,8,3,7,4,78,54]
# s = set(l)
# print(s)
# #2. 순서가 없다.
# a="Hello"
# s2= set(a)
# print(s2)
#
# A = {1,2,3,4}
# B = {1,2,3,4}
# #합집합 => 두개 이상의 집합의 합 (shift + /(백슬레시)=>|
# print(A|B)      #{1,2,3,4,5,6}
# #차집합
# print(A-B)      #{1,2}
# #교집합  집합들의 공통된 부분들 A & B
# print(A & B)


# i=0
# while True:  #조건이 계속해서 참이므로 무한반복된다.
#     i += 1
#     if i ==10:
#         break       #break = 반복문을 탈출한다.
#     if i % 2 ==0:
#         continue
#     print(i)


#별찍기
n = int(input())

for i in range(1,n-1):
    print(' '*(n-i)+"*"*(2*i-1))
